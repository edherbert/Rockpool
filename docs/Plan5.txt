--Rockpool design--
I've been thinking for the past little while about how other aspects of Rockpool will work.
For example, how will the terrains work for things like indoor scenes?
Should all the terrains be grouped together, or separated in some way?
How should the layering work?


-Indoor Scenes-
Indoor scenes aren't really based around terrain.
They use a modular system of identical sized assets that can be used to make any sort of shape.
So for example, you might have a corner piece of wall, as well as a normal flat piece of wall.
These wall pieces could be placed together to create an indoor scene.
These pieces are to be a universal size, so for example one metre by one metre.
This would allow all the pieces to easily stack together and make up practically any indoor scene you could want.

This conflicts with the terrain system I have at the moment.
Rockpool makes the user have a terrain in their scene, the user could probably do with a choice as to whether they need it or not.
Realistically, there is nothing stopping the user from adding terrains in any scene.
With this in mind, it might be better to separate the terrains, so put them in different terrain groups per terrain and so on.

-Separated terrains-
It might be better to use a system like unity, where items are put into the scene and can be placed in any location.
This would mean that the terrain is not a neccesity and can be used in any way, almost like an object in the game.
This would give me much more freedom with regards to the objects in the world, as I wouldn't have to have a terrain to put the objects onto.

-How should the layering work-
I suppose there won't be layers.
It'll just use the standard hierarchy system that I see in most editors, although I'll do some things differently.
Firstly, I can't just export the entire thing in a single file.
For example, the overworld will have a huge number of entities in it, I can't just export them all in one file.

What I could do is export them based on their position in the world.
So if the entities are between 0 and 1000 x and y then export them in one file.
So basically export them in blocks of 1000, depending on their location.
This size could be configured by the user.

I can think of some potential problems with this.
Firstly, what would happen to an entity who's parent is in another chunk?
If the parent's chunk is unloaded, then what would happen to the child?
I think the best way to handle this would be to forget about both the child and the parent.
If a parent node is un-loaded then all it's children are as well.

-Does this mean that a single node could have two terrain chunks?
    Yes I suppose it could. There is no reason why this might be a bad thing.
    The user should be sure however that if each terrain is 1000 by 1000 that they line up properly.

-Where will the terrain tools go if the terrain is changing like this?
    I'll probably leave them where they are. I like a toolbar.
    I'll have to make it so that the user can't edit multiple terrains with a single tool stroke though.

-What's going to happen to the terrain information interface?
    I should probably group them together into their own thing.
    So if you click on an entity, you'll be shown information specific to that entity.
    So if you click on the terrain, you'll be shown information relative to the terrain.


--More thinking--
The problem I have at the moment is a lot of the user interface needs to change.
I'm going to have to implement the object hierarchy panel, which will contain the information about the objects in the scene.
I'm almost not sure if I'll need something like the terrain tools panel.

The user will probably edit the terrain by clicking on the terrain and changing it's values in the inspector.
This would be pretty similar to how unity works.
The inspector will contain all the information about the object that's currently selected.
If that's the case, I'm not really sure how I'm going to need the tools in a tool panel. It might just be easier to put them in the inspector.
However, this is something for the future, for now the most important part is planning out how the entities will work.
It'll probably be a good idea to merge the command branch back to the master branch.

--Plan for now--
There are a few factors that are going to have to change a bit to accomadate for the new design.
With the new design, I'm going to have to re-name a few things, and re-design other things.

I'm still going to keep calling Rockpool a map editor.

Basically, everything that can be placed in the world inherits from object, which is a class.
Each object can be placed at a position, and parented to any other object.
Objects could be anything, ranging from a cube to something like terrain (terrain can't be scaled or rotated).

There will be a hierarchy of objects, this is used to view the objects which the user currently has in their scene.
The user can use this to select objects and re-arrange their order.
Objects inherit the scale, rotation and position based on their parents.

There will also be the object inspector.
This will contain the relevant information about the currently selected object.
This would change depending on what type of object is selected.
So if a mesh is selected it would show the material information about that specific mesh.
If a piece of terrain is selected then it will show the terrain information, as well as the terrain tool information.

Finally, the resource browser will contain information about the resources that the user has at their disposal.
This could be things like meshes, images, materials and so on.
This will also contain prefabs when they are implemented.
To place something into the map, the user simply has to drag it into the render window.

So with this in mind, the main aspects of the program are:
    The object hierarchy
    The resource browser
    The object information panel

This means that there are a few aspects of the current system that need to be changed.
firstly, the terrain info panel and the tool panel will need to change.
This change will probably be getting rid of them more than anything. However, I won't be doing that for a long time.
I don't really want to remove features before I have features to replace them with, so for now they are staying.

From here I need to plan out how the classes will interact with each other.
Quite a few classes will need to change, for example the terrain class.
They need to be planned out before anything is implemented.

Here is a list of things to think about:
    -How will the gui for the inspector work? Will it all be there like the terrain layers panel, or will they be created as they go along.
    -Will there be things like components in the inspector?
    -How will storing items in the scene work? Will ogre handle the entire thing or will each object have it's pointer stored(probably the latter)
    -How will the object inheritance work? Will the objects inherit from object them mesh then terrain or whatever.
    -How will saving prefabs work (Will the prefabs be saved relative to the one map or the entire program)
        -If relative to the map, will they be exported along with the rest of the map.


--Info panel--
It's important that the information panel contains information that's useful to the user.
The question is should it contain all the gui components or should some of them be created / destroyed when needed.
Ultimately, I think it would be best if I had a handler that managed the individual information boxes.

Each object will have a component section, but that does not mean that each object will have a material section.
For example, I don't think the terrain will have a material section.
This does not mean that the material section needs to be removed, it just means it should be hidden.

The best idea for this might be a system where you have a handler for each individual information section.
So for example, you would have a positionInformationHandler for the position and scale and everything, and then a terrainInformationHandler for the terrains.
These handlers would then contain functions to show or hide them, as well as setting their values if the selection is changed.

I could also have an informationPanelHandler that manages which handlers to show.
This would probably contain a vector, and a function in which the type of item could be passed.

There is no guarantee that I won't want to add more components to the information panel. This would allow me to do that.
I'll implement that panel once I have things to add to it.

--How items will be stored--
Thinking about it, I really don't think it would be a good idea to let ogre store all the items.
I think I'm going to need simple classes that contain mostly pointers to handle that sort of thing.
So I'll have an object class which contains a pointer to an ogre entity and probably a pointer to it's parent and child (if it has one).
This would mostly just be in the object class, of course, each item will inherit other bits as well.
For example, the terrain will extend to a terrainObject, which will contain all the terrain functions.

I'm also going to have a terrain manager, which will store all the terrains (and the terrain group).
This can be incharge of saving the terrains and so on.

The map class will be used to interface with all these components, so it will store all the objects in the map, and provide an easy way to get to them.
It will be in charge of handling input requests, such as terrain edits, regardless of which canvas was used.

--Future classes--

Main - In charge of handling the map files. This is where you would go to load or save a map
Map - The current map. This will contain information about the objects in the map and also be the interface to handle input on the map.
CanvasHandler - This will handle all the canvases that the user has created. This will be where the user can render a canvas, or get it's input
Canvas - This is the individual canvas. Canvases check their own mouse position and click input.

Object - This contains basic information about the object including pointers to the current scene node and parent and child nodes.
    It will also contain interface functions to control the node.
    This class will not assume that the object has anything to render, it will largely just represent a scene node.
meshObject - Inherited from the object class, this will contain information about meshes in particular.
    This one does assume that there is something to render, it's similar to an entity in ogre.
lightObject - An object that represents a light
terrainObject - An object which represents a chunk of terrain, needs to be managed by the terrain manager.

terrainManager - Manages the chunks of terrain. Responsible for saving and loading terrain.

HierarchyManager - Provides a display of the map hierarchy. This will provide an interface to tell the map which objects are currently selected.
InfoManager - This will provide information about the object(s) that is currently selected.
InfoComponent - This will be an individual panel that will appear on the infoManager, for example the position of the item.



--Object handling--
By storing the scene node of the object, you can get the other scene nodes, but not the object.
The best thing to do would probably be to store the parent object as a pointer and the child objects as a pointer vector.

I'm not sure of the best way to store the objects in the map though.
Maybe I could number all the entities in the list. That would allow me to do a binary search rather than just checking them all.
However, there are times when I think the objects might not align. For example, what if they are moved.
If I store all the objects as a flat vector pointer list then I might not even need to re-arrange them.

It might be worth seeing how the tree ctrl handles ids.
I might be able to store the id of the tree item in the object.
This would pretty much allow me to search through the list and find the item in question.

So it turns out that you can store data within the tree ctrl, for each individual member of the tree.
You kind of have to inherit it and do it that way, but this should allow me to store a pointer to the object within the tree node.
Then, within the object I can store a pointer to the tree node.
This will completely avoid the entire searching the array thing.
I'm not even sure if I need that vector in the map class to store all the objects after all.

How would the hierarchy know which objects are in the map when it begins.
It would read in the file from the user and then turn that into a map.
As it goes it would create the objects, and then it would create the node in the tree hierarchy.
The node would then have a reference to the object, and the object to the node.
If the node was removed, the object could be as well, and visa versa.

--How objects work--
An object is just a wrapper for the scene node.
This means that it should come with a load of functions to attach objects together.

--Hierarchy--
The hierarchy will largely just be a tree ctrl, at least for now.
It should probably have it's own directory, as I'm probably going to have to abstract out the tree ctrl to it's own class.

--Hierarchy and the map--
The contents of the hierarchy should mirror the map completely.
I need some sort of universal way to edit the map and have that reflect in the hierarchy.
I need a command at some point anyway, so I think it might be a good idea to work on one of those.
Firstly, I'm going to need to abstract the function of the hierarchy into it's own functions.
So when the mouse is released, a function like moveObject is run, rather than running it in the function.

This would mean that I can also undo and redo these actions.

The issue will be making sure that the two are in sync.
I'll have to designate one place in which items can be added and removed from the map, so probaly in map.
One problem I have is with the undo and redo system.
How can I make sure that the objects are added and removed properly.
If there is a large tree of objects, they would all need to be stored in the command.
The plan was to detach them from their appropriate parent if they were 'deleted'.
Only when the command reached the end of the command memory buffer would the objects actually be deleted.
So essentually when the command is deleted, all the objects associated with it would also be deleted.

I suppose in total there would be three commands, move, add and delete.
They would all need to retain information about the items they effect.

With this sort of thing, I can just have a command to do all the work.
Maybe I could have the command deal with both the hierarchy and the map.
In that sense, the two could be separate, but still attached in a way.

--Object commands--
I suppose there will be lots of commands that manipulate objects.
Scale Command
Move Command
rotate command
Re-arranging objects in the hierarchy
Adding objects
Removing objects

That's just a few. I think the thing they'll have in common is that they will need to contain a list of objects.
Each one of these functions can operate on multiple objects (except maybe the adding objects one).
So I suppose they should all contain a list of objects.
Each object should also contain a pointer to the tree item.
The purpose of the individual command can be determined from that.
Some other commands like the scale and move ones will need immediate feedback, so it's important the class isn't always immediate.
For something like the add object command you could just tell it what object and what to add, then call performAction().

Before I begin doing the commands, I should do the right click functionality, just because that'll be needed to add objects.
Once that's there, I can do the code for the command that adds objects.
I think the add function might be the only function that doesn't inherit from the object command class.
Basically, It'll just run the appropriate functions for the map and the object hierarchy.

I could create the object inside of the object hierarchy and then pass it into the event.
I could just give a resource name to the command and let it figure it out from there.
For adding an object, that might be easier.
Most of the actions are going to be doing that sort of thing anyway.
The delete command would need an object, but that's fine.

The object hierarchy will need access to the current map.
This will have to be set dynamically, for when the maps change.

--Undo and redo hierarchy--
I've got a bit of a problem with the hierarchy at the moment.
When it comes to undo things, the only choice I have to to delete the items from the hierarchy.
This becomes a problem for items that are further down the stack.
So if you create an item in the root and then another within that item, then delete them the problem occurs.
The first item that's added will be a new item, and then from the other item's memory it will try to attach itself to the previous object.
The item that was placed there by the undo is technically a new item, so items that were previously it's children can't just be inserted like that.

This means that I almost would need to go through the commands and update them as they go.
That, or I would need something different to define each item's position in the hierarchy.

Objects aren't deleted until they are removed from the command stack, they are just detached.
However, this makes no sense if the items in the hierarchy are deleted.
The idea was the hierarchy stores a pointer to each object so the map doesn't need to.
That wouldn't work if each item in the hierarchy is destroyed (and thus the pointer to the object with it).
The objects will largely look after themselves (as ogre does most of it), however I would need to remember which item is which.
Otherwise, how would I solve the problem of the conflicting items.

Maybe, If an item is re-appended, a search would need to go through all the object commands that reference the previous value and change it to the current.
So only if the item is re-appended the check is carried out.
Each item has a parent, so there can be a function to set the parent value.
maybe checkParent(wxTreeItemID oldId, wxTreeItemID newId).
It would go through and check for anything with the old parent Id and replace it with the new Id.
Of course, it wouldn't matter if the new parent was removed again, because the function would be re-run when it's re-appended.

This will most likely mean inheritance for the object commands.
I suppose I'll need a class with at least the parent item and a function to check it.
I'll probably need a function to check the type of command as well, so if it's an object command run the functions.

--Object commands--
It might be easier to replace the reference to the parent in the object commands with a vector of objects affected.
Most commands will need a list like this.
The add object command is one of the only ones I could think of that probably won't need it.
However, I can just push the id to the list and reference it, knowing that there will only be one value in it anyway.

In order to be able to delete commands, some extra information will need to be stored.
Firstly, I'll need to store the items and some information about them.
I can't just store the selection, as if one of them was deleted this data would be gone.
I'm going to have to take the data apart when it's been given in the constructor.
I should probably store the id as well, but also the item text and object data.
This can be kept as a struct and stored like that.
Therefore, if an item was needed again, I could just create it based on the values in these items.

Second, I'm going to need to be careful about the items that are stored.
Firstly, I can delete items in the hierarchy, but what if the items have children.
They would also be deleted and if they weren't selected, their data wouldn't be added to the items.

I'm also going to need to make sure that no items appear twice in this list.
That's for if you're trying to delete an item that's selected, but also the child of a selected item.

Then I'm going to need to keep a reference of which item is parented to which item.
Bearing in mind that an item that's a child might also have a child.
I almost need to give each item an id. Then I could reference who's parent is who.
I suppose I could just store the regular Id.
This is the id for the specific object, rather than it's parent.

One thought I had is that it might work by not having to store a reference to the parent.
You would need to store the id of the parent, But if the items are added to the list from top to bottom then there would be no conflicts.
The parent item would already be in the list by the time it comes to add it's children, so there's no problem.
I do think that each time I append a new item, I'm going to have to go through the list and check for the old id to be replaced.

The checkItem function will also have to be thought about.
Certain commands will probably need to override that function.
For example, the delete command would need to override it to check it's list of items.
The same would go for some of the other commands that deal with multiple items.
Furthermore, the delete command wouldn't really have a parent, like the object command expects it to.
Most commands would have many parents.
With this in mind, it might be a better idea to just have the base function in the object command as a virtual function.

--Copy and pasting--
Copy and pasting might end up being a bit complicated.
Some of the commands might not even end up being commands.
Does it make any sense to have a command to copy an item?
Probably not as nothing is being done.
Should the clipboard be stored in the command manager, or should it go elsewhere.
Probably in the command manager.
I would need to switch the items in it accordingly.
For each paste, it might be a better idea to copy the contents of the clipboard and then undo those when they need undoing.
So that means that each paste command will be a copy of the clipboard, regardless of what the current clipboard is.
With this in mind it would be safe to say that the copy command will be fairly straight forward, as it's not really a command.
The cut command will just be the delete command with the copy command strapped to it.
The paste command will be the actual one.

The clipboard will have to store data like the items in the hierarchy, as well as the objects.
I don't think the objects can be stored as pointers.
If you copied an item a while ago, and then something about the objects changed, that would not keep to the original.
So for that reason the clipboard will need to store information rather than pointers.

--More on dragging--
The dragging is turning out to be more difficult that I thought it would be.
There seems to be some sort of problem with the id system. It can't reference items properly.
At the moment, I'm wondering if a system where I assign the ids might be better.
I could have an id for each item based on it's position in the hierarchy.
The system could then look up to see which item is which, and then remove that.
This would remove the dependency on items, meaning that checks might not be needed.
This would mean that the location of each item is important.

Ok so I figured out the problem, I was deleting the items, then assigning them.
The problem with this is that wx was assigning new ids to the new items that overlapped these older values.
So you have to be careful when deleting items not to allow them to be re-assigned.
I've fixed this problem by moving them around, but this leaves me with another problem.

As the other items also use the same delete thing, there is a chance another overlapping value could be given.
The delete command for example will delete something and then store it in memory, incase it needs to be brought back.
If another item is assigned this value while the delete is still in place, the update command would incorrectly update this delete.
Thus leading to the issue of the item not being deleted correctly.
This means that I need a system where ids are not re-used.

One solution I can think of is to keep a list of the used ids.
When you create a new item, you go through this function, which creates the item.
It will create the item and check the id. If it has been used before, then delete it and create another item.
Do this until the id has never been seen before.
Hopefully this won't lead to an eternal loop that's just giving back the same id each time (I'm worried it might do)

Thinking about it, I'm not sure I'll be able to create unique ids each time.
I'm probably going to have to create a system that doesn't rely on the ids to replace older items.
So when it does the search for old items, it instead searches for my unique values to replace.
Even now, deleting large ammounts of items causes issues.

Possible idea:
Store a list in the tree ctrl of all the used ids
Then, rather than storing the id, you can instead store the int index to this id in the list.
The idea is that each id represents an item that existed at some point.
So if you wanted to append item 1 it would check the list to find it's id.
If item 1 was deleted from the list then it would still be stored in this main list.
Then, when it was re-added it could have a new item assigned to it.

The items that also reference it (like the add command for example) would just reference the int id, rather than the item id.
This means that even if the value is changed multiple times, there would be no confliction as to what's what.
It would also prevent items from conflicting.

I would have to write my own functions for the hierarchy tree.
Firstly, I would have to write a function that adds items.
So this would just take the parent item for example and then create the item.
It would add it to the list and make sure that it has it's appropriate id.
Then, if you wanted to delete an item, you could just delete it and return the value in the list to 0.
When the item is re-added, it would just be a case of creating an item within that index of the list.
So things like the moving function could just replace all their ids with references to the id.

--Arranging objects--
I need to start thinking about how I plan to arrange objects.
The problem I have at the moment, is the functions simply append items to their origin, rather than actually thinking about where they should go.
If I deleted an item at the top of a list and then undid that command, the item would appear again at the bottom.
Obviously this isn't what I want it to do.

I can instead use the function insertItem, which inserts the item after a provided one.
This can be used with either an item to represent the before, or an index int.
I think I'll use the one that references the int.
Firstly, this will require a function to find the index of the item.
Basically, I'm going to need to iterate over the children on the parent item, until that item equals the current item.
The number of iterations taken is the value.
I'll only need to do this for the parent items.
