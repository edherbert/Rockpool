--Resource Manager--

The resource manager will be one of the most crucial aspects of the finished product.
It will allow the user to control which objects are placed in the world, as well as be given a view as to what objects they could place.
Ogre handles the majority of the resource management, but there are some things that still need to be thought about

Resource locations are added to the map through the map settings section.
Locations can be removed and added when needed, although if an entity is using a resource that corresponds to that resource location then the user will be warned.
If the resource location is removed then the entities that are using that object will have their models replaced with something generic.

If the user is attempting to add a location that contains a conflicting resource, the location will be rejected
The user will be shown a pop-up warning them about what they are trying to do and which resources conflict.


The resource manager will come with a pane that contains the resources in a grid-like fashion.
When the user is using the entity placing tool, they will be able to choose a resource from this list to place.
Eventually, if the user double-clicks on a resource they will be shown a popup of it running in a window.
Furthermore, each resource should contain a thumbnail.

The resource manager that is used by the entity placing tool will have to be different from that which selects images because and image can't be placed.


Here are the aspects of the resource manager:
    -A manager for handling thumbnails, each resource shouldn't have to have it's thumbnail re-generated each time a new one is needed
    -A window to return the name of a resource when it is clicked on.

--Resource Locations--
Rockpool will need a place to store the terrains in. Even with this in mind, it won't be storing a great deal of information.
I suspect that the user will want to store their data in a separate location.
If there are lots of maps that use the same resources, then why have them duplicated in each map directory.

However, there are some locations that would be necessary, like the terrain data directory.
With this in mind, it would be easier to have this directory a location that Rockpool has access to, but not tell the user about.
So when the user starts up Rockpool, there will be no resource locations there by default, and therefore no resources for them to use.

It might be a better idea to let the user choose where Rockpool saves it's terrain data.

The user will be able to export to a number of forms, things like json, xml or text.
This export will include things like heightmaps for specific terrains, and the data for where each entity goes.
The export format will be similar to the working format, although it will come in different files.
The user isn't supposed to use the working directory for production (although they could I suppose)
The working directory will always export ogre terrains, ragardless of the export settings.

When I'm using it, I'll probably have directories that contain the working directories for Rockpool maps.
So I could have an overworld map and then a cave map and so on.
Then I'll export them into the game's resource directory.
For the game, I'll probably have a few resource locations, like terrain data, heightmaps, terrain information and so on.
I'll also have a directory there that contains all the models and textures.
From there I can add a resource location to that in the project and just use them like that.
This prevents me having to duplicate the resource files and keep everything neat in game's resources.
