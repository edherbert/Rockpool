--Resource Manager--
The resource manager will be one of the most crucial aspects of the finished product.
It will allow the user to control which objects are placed in the world, as well as be given a view as to what objects they could place.
Ogre handles the majority of the resource management, but there are some things that still need to be thought about.

Resource locations are added to the map through the map settings section.
Locations can be removed and added when needed, although if an entity is using a resource that corresponds to that resource location then the user will be warned.
If the resource location is removed then the entities that are using that object will have their models replaced with something generic.

If the user is attempting to add a location that contains a conflicting resource, the location will be rejected
The user will be shown a pop-up warning them about what they are trying to do and which resources conflict.


The resource manager will come with a pane that contains the resources in a grid-like fashion.
When the user is using the entity placing tool, they will be able to choose a resource from this list to place.
Eventually, if the user double-clicks on a resource they will be shown a popup of it running in a window.
Furthermore, each resource should contain a thumbnail.

The resource manager that is used by the entity placing tool will have to be different from that which selects images because images can't be placed.
The gui part of the resource manager should be able to find resources of a certain type, and filter out other resources.


Here are the aspects of the resource manager:
    -A manager for handling thumbnails, each resource shouldn't have to have it's thumbnail re-generated each time a new one is needed
    -A window to return the name of a resource when it is clicked on.

--Resource Locations--
Rockpool will need a place to store the terrains in. Even with this in mind, it won't be storing a great deal of information.
I suspect that the user will want to store their data in a separate location.
If there are lots of maps that use the same resources, then why have them duplicated in each map directory.

However, there are some locations that would be necessary, like the terrain data directory.
With this in mind, it would be easier to have this directory a location that Rockpool has access to, but not tell the user about.
So when the user starts up Rockpool, there will be no resource locations there by default, and therefore no resources for them to use.

It might be a better idea to let the user choose where Rockpool saves it's terrain data. (I switched this, so it's not anymore)

The user will be able to export to a number of forms, things like json, xml or text.
This export will include things like heightmaps for specific terrains, and the data for where each entity goes.
The export format will be similar to the working format, although it will come in different files.
The user isn't supposed to use the working directory for production (although they could I suppose)
The working directory will always export ogre terrains, ragardless of the export settings.

When I'm using it, I'll probably have directories that contain the working directories for Rockpool maps.
So I could have an overworld map and then a cave map and so on.
Then I'll export them into the game's resource directory.
For the game, I'll probably have a few resource locations, like terrain data, heightmaps, terrain information and so on.
I'll also have a directory there that contains all the models and textures.
From there I can add a resource location to that in the project and just use them like that.
This prevents me having to duplicate the resource files and keep everything neat in the game's resources.

--Duplicate resources--
One problem I'm going to face at some point is duplicate resources.
In the terrain data file, I only really want to describe the name of the resource, and not the path.
However, if there are other files in other directories with the same name, then I won't be able to do this.
Ultimately the user needs lots of choice about their resources and output formats, so I'll think about this later.
Essentually, if the user has the same resource in the same resource group, then they will be shown a warning

--Resource Handler--
The resource handler is a component of the resource manager.
It's what's in charge of handing the resources in the directories.
This has nothing to do with the gui for the resources.
This is what all the components go to if they want to query a resource.
So the gui section will go to this class to find the resources that it should show.

The resource handler is also in charge of handling the wx thumbnails of the resources, although this will come at a later date.

Thinking about it, it might be a better idea to call it the resource manager.

So while the resource manager is incharge of handling the resources, it decides at certain points where to find the resources.
I could say that once every 30 seconds it will re-check for resources in it's locations.
This can also be called at other times, but that's the specific time.
It will essentually check if a file has been changed or moved.

Once it has built up a catalogue of resources, it will sort them accordingly.
The information for the resources will most likely be stored in structs.
The information will be things like the resource location, the resource name and so on.
I'll probably store everything as pointers.
Rather than storing the directory path for each resource, which would mount up, it would be easier to store it as a pointer and just access it like that.

--Resource Browser--
For now, the resource browser will be pretty straight forward.
The user will be show a grid of values and asked to select one.
The search functionality will allow users to find values quickly.

I'll probably lay out the resources with classes that inherit from panels.
Again, they'll probably be pointers to the classes.

The resource browser will have a list of resource tiles.
Whenever the browser is refreshed (about 30 times a second) the resources will be updated
I'll probably create a number of tiles equal to the number of resource locations when the editor starts.
Then when the browser is refreshed, I'll check how many tiles are currently in the browser.
I'll match it to the number required by removing or deleting tiles.
Then I'll go through the list and set the text and icon in the tile equal to that in the required list.
This will minimise the ammount of times items are binded and re-binded to the browser.

A resize, is when the tiles are ordered in a grid based on their location.
I get the impression that I'll be doing manual positioning for the tiles, rather than using a sizer.

I might create another class for the actual tile part of the browser.
I want to use it for the popup browser for the terrain layers.
It would be easier to abstract that part of it.

I'll probably have to re-name some things:
    resource browser
    resource browser panel
    resourceBrowserTile


--Terrain Editing--
The terrain editing will need some work as I begin to add more tools to it.
Firstly, I'll put the ray results into their own struct, as they're all universal.

Some of the arguements will stay the same, like the brush height and brush flow.
These values won't be set by the brush, but rather by the map function.
I'll abstract out a function to return the terrains that need to be edited.

The brush manager will have to be able to return some sort of array for the width and height of the brush, which contains information about how the brush looks.
The brush manager will handle this, meaning there is little input needed on the part of the terrain, so they're not re-calculated each time the terrain is edited.

Other than that, I'm not sure what I can change.

--Brush manager--
I'm going to have a class to manage brushes. This will be separate from the brush browser that will list all the brushes the user could use.
The brush manager will be in charge of generating the brushes and storing them.
There will be a function like get current brush data that will return an array of the brush data, which are floats ranging from 0 - 1.
This will just say how much the brush needs to be raised from the ground.
The point of this is to minimise the ammount in which the brush data is being generated.
I think I'll re-generate it when a new brush is selected, and then it will be stored in memory.
Brushes can also use images, but for now I just want to have a radial brush.

Each time the user changes the size of the brush, the values will need to be re-calculated.
I don't want to do that each time the user changes the brush size, so I think I'll do it when the brush data is requested.
If the data requested is different from the current data, then it will be re-calculated.

--undo-redo--
From what I can gather, the general way in which this is done is using a command structure.
Basically anything that can have an effect on the project is abstracted into a command, which is then run.
This command would then have some sort of 'anti-command' which could be run if the command needed to be un-done.
I think each command inherits from something, but always contains the information needed to be run.
So you would have a command that edits the terrain texture at a certain range of positions.
You would also have one that edits the terrain textures at certain positions.

Each of these would have an action and an anti-action.
When the user goes to edit the terrain, their edit would be run through the action manager, so that it would know how to remove it later on.
The only problem I can think of with this is that the action will be created after the edit has happened.
What should happen is the user edits the terrain and they get immediate results.
If they wanted to undo something, it should be from the last time they clicked, rather than from each action.
So the object should be created and then have the addition data added to it.

Other functions such as changing a terrain texture could also have their values implemented into a command.
This could mean that I have lots of commands for small functions, which might not be the best idea.

For things like deleting the terrain layers, I'm going to have to do things like store the blend values in the command object.
This way, if the command is un-done, the data in the command can just be re-inserted.
For now, I'll just focus on being able to re-do and undo terrain edits.

The classes will look like this:
    Command manager:
        This will store all the commands between the two vectors.
        It will be incharge of managing all the commands and functions that undo and redo the commands.

    Command:
        This will be primarily for inheritance.
        This is what the command manager will store.
        It will have functions like perform action and performAntiAction.
        These will be called when an action is un-done, or re-done.

    Inherited commands:
        These are the commands specific to each action.
        So an action like a terrain sculpt would inherit it's own class from this.
        The terrain sculpt would contain information about what was sculpted, the brush size and so on.
        I might even inherit the terrain sculpt actions from each other.


--Texture commands--
The problems I'm having with the texture commands is that they're not taking into account what the previous values were.
So for example, if the other values were 0.5 on a layer that wasn't being edited, they would be reduced.
Basically, this means that the values can't be brought back simply by reversing the action, so I'm going to have to store them values.

There are a few ways I can think to do this.
Firstly, I don't want to duplicate the values too much.
The only values I'll need to store are the values before the edit happened, although storing them nicely is another issue.
I'm almost going to have to check if the values that already exist in the command already have the values I need to add.
If I have a brush of 100 x 100 that would mean 10,000 values that need to be checked each frame, which is a lot.

It might just be easier to store the entire data for that terrain before the action took place,
that way when the action needs to be un-done, the old data can just be used to replace the newer data.

I worked out that if I stored the entire terrain blend data for each layer, that would come to about 33 megabytes, which is far too much.
I need to be able to store the values only for the local area that's being edited.

Bits like the height edit tool won't be too hard, because they're only on a single layer.
The texture tool is across up to four layers, so there will be extra data to store there.

One way could be to figure out if the mouse has moved it's position on the terrain.
If you check the current start position with the previous one, and they are the same, then that means the brush hasn't moved.
It's important that these actions are calculated without consideration for the brush size, as that might change during the edit.

Maybe the best idea would be to just push the values into the array if the user moves the mouse.

Ok, so I got the texture to work by only pushing values if the mouse location changes.
It seems to be a pretty immediate response, so I think I'll keep it.
This can also be used as a framework for the other tools, as they're all going to have to remember what the terrain was like underneath them.
For now, here is a list of things that need to be changed with what I have at the moment:

    If the other tool don't require it, get rid of the arguement to update the terrain.
    Find a better way to reference the terrain than passing the terrain rays each time the mouse moves.
    Actually find the number of layers the terrain has and not reference them directly in the terrain and command classes.
    Maybe put the layer data into a list so that it can be looped over.
    The memory usage for the texture tool is pretty rediculous. Maybe think up another way to handle it.
