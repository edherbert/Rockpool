--Resource Manager--

The resource manager will be one of the most crucial aspects of the finished product.
It will allow the user to control which objects are placed in the world, as well as be given a view as to what objects they could place.
Ogre handles the majority of the resource management, but there are some things that still need to be thought about.

Resource locations are added to the map through the map settings section.
Locations can be removed and added when needed, although if an entity is using a resource that corresponds to that resource location then the user will be warned.
If the resource location is removed then the entities that are using that object will have their models replaced with something generic.

If the user is attempting to add a location that contains a conflicting resource, the location will be rejected
The user will be shown a pop-up warning them about what they are trying to do and which resources conflict.


The resource manager will come with a pane that contains the resources in a grid-like fashion.
When the user is using the entity placing tool, they will be able to choose a resource from this list to place.
Eventually, if the user double-clicks on a resource they will be shown a popup of it running in a window.
Furthermore, each resource should contain a thumbnail.

The resource manager that is used by the entity placing tool will have to be different from that which selects images because images can't be placed.
The gui part of the resource manager should be able to find resources of a certain type, and filter out other resources.


Here are the aspects of the resource manager:
    -A manager for handling thumbnails, each resource shouldn't have to have it's thumbnail re-generated each time a new one is needed
    -A window to return the name of a resource when it is clicked on.

--Resource Locations--
Rockpool will need a place to store the terrains in. Even with this in mind, it won't be storing a great deal of information.
I suspect that the user will want to store their data in a separate location.
If there are lots of maps that use the same resources, then why have them duplicated in each map directory.

However, there are some locations that would be necessary, like the terrain data directory.
With this in mind, it would be easier to have this directory a location that Rockpool has access to, but not tell the user about.
So when the user starts up Rockpool, there will be no resource locations there by default, and therefore no resources for them to use.

It might be a better idea to let the user choose where Rockpool saves it's terrain data. (I switched this, so it's not anymore)

The user will be able to export to a number of forms, things like json, xml or text.
This export will include things like heightmaps for specific terrains, and the data for where each entity goes.
The export format will be similar to the working format, although it will come in different files.
The user isn't supposed to use the working directory for production (although they could I suppose)
The working directory will always export ogre terrains, ragardless of the export settings.

When I'm using it, I'll probably have directories that contain the working directories for Rockpool maps.
So I could have an overworld map and then a cave map and so on.
Then I'll export them into the game's resource directory.
For the game, I'll probably have a few resource locations, like terrain data, heightmaps, terrain information and so on.
I'll also have a directory there that contains all the models and textures.
From there I can add a resource location to that in the project and just use them like that.
This prevents me having to duplicate the resource files and keep everything neat in the game's resources.

--Duplicate resources--
One problem I'm going to face at some point is duplicate resources.
In the terrain data file, I only really want to describe the name of the resource, and not the path.
However, if there are other files in other directories with the same name, then I won't be able to do this.
Ultimately the user needs lots of choice about their resources and output formats, so I'll think about this later.
Essentually, if the user has the same resource in the same resource group, then they will be shown a warning

--Resource Handler--
The resource handler is a component of the resource manager.
It's what's in charge of handing the resources in the directories.
This has nothing to do with the gui for the resources.
This is what all the components go to if they want to query a resource.
So the gui section will go to this class to find the resources that it should show.

The resource handler is also in charge of handling the wx thumbnails of the resources, although this will come at a later date.

Thinking about it, it might be a better idea to call it the resource manager.

So while the resource manager is incharge of handling the resources, it decides at certain points where to find the resources.
I could say that once every 30 seconds it will re-check for resources in it's locations.
This can also be called at other times, but that's the specific time.
It will essentually check if a file has been changed or moved.

Once it has built up a catalogue of resources, it will sort them accordingly.
The information for the resources will most likely be stored in structs.
The information will be things like the resource location, the resource name and so on.
I'll probably store everything as pointers.
Rather than storing the directory path for each resource, which would mount up, it would be easier to store it as a pointer and just access it like that.

--Resource Browser--
For now, the resource browser will be pretty straight forward.
The user will be show a grid of values and asked to select one.
The search functionality will allow users to find values quickly.

I'll probably lay out the resources with classes that inherit from panels.
Again, they'll probably be pointers to the classes.

The resource browser will have a list of resource tiles.
Whenever the browser is refreshed (about 30 times a second) the resources will be updated
I'll probably create a number of tiles equal to the number of resource locations when the editor starts.
Then when the browser is refreshed, I'll check how many tiles are currently in the browser.
I'll match it to the number required by removing or deleting tiles.
Then I'll go through the list and set the text and icon in the tile equal to that in the required list.
This will minimise the ammount of times items are binded and re-binded to the browser.

A resize, is when the tiles are ordered in a grid based on their location.
I get the impression that I'll be doing manual positioning for the tiles, rather than using a sizer.

I might create another class for the actual tile part of the browser.
I want to use it for the popup browser for the terrain layers.
It would be easier to abstract that part of it.

I'll probably have to re-name some things:
    resource browser
    resource browser panel
    resourceBrowserTile
