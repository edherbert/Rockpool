--Objects in the hierarchy--
The hierarchy will store references to the objects in the scene.
This will be stored in the object data, rather than a separate list.
It's important that each item knows where it should go, especially given how the actions can also be redone.

So for now, I think the plan is this. Objects should only be detached when they are deleted.
This means the action can be easily undone if necessary, as the object would just have to be re-attached if needed again.
When the command expires, the object can then be deleted.
So undoing an action like the add event would just require detaching the object, but remembering where it went.

I'm probably going to have to add a pointer to the object in the item struct.
This is because commands like the delete command operate on lots of objects.
Again, I would just have to detach the base item's objects, but I would still need pointers for the re-creation of the items.

So when each new item is appended, I can pass the data in that basically just holds a pointer to the object.

--Moving entities--
I want to start work on the entity move command.
This basically would work by selecting an item and then pushing a key, for example the M key.
Then as the user moves the mouse, the item would move with it.
They can also specify an axis to move the item on

This will also be a command, but I'm not entirely sure where the command should go.
It should probably go in the map class, because that's running a check function for input.
I suppose I'll have quite a few move commands by the time I'm done.

--Duplicating items--
So the way that duplicating items works is pretty straight forward.
You have to create a copy constructor for the object, which is basically just a constructor that takes in a reference to the object that needs to be copied.
The constructor can then go through the object and pull all the information from it to copy itself.
So as for the duplication command, it shouldn't be too difficult.

The copy command is probably going to have to duplicate the item again, and store that in the command manager or something.
When a paste function is needed, the item can be copied again and just pasted into that new place.
Furthermore, objects will have to inherit this copy method so that it can be performed correctly.

--Copy and pasting--
It's time to start thinking about how I plan to do copy and pasting.
Firstly, the program should take a copy of the item when it is copied.
I can't just take a pointer to the object, because if it's changed since it was copied then this copy would also change.
So because of this, I would need to do something like take a complete copy.
So I'm thinking that I could use the copy constructor to copy the object but not assign it to the scene.
When the object needs to be copied again, you can just copy it again, but actually do something with this item.

For this, I would need a constructor to actually hold the clipboard contents.
It might be a good idea to make a class that does this, for example HierarchyClipboardManager.
This would just contain a vector of objects that represent the clipboard.
You would have two functions, one that sets the clipboard and one that clears it. (the clear function will be run by the set command anyway)
The set command can just take an array list. This would probably have to do some searches to find the child items.
Then it would just store it like that.
Then the paste command would come along and do pretty much the same thing as the duplicate command.
When the copy command was called again, the objects in the clipboard can be deleted and replaced with the new ones.
Of course, the items in the clipboard won't be attached to anything in the scene, but they will still be there.

--Rays and planes--
From what it seems, the way to calculate the movement of an item is to surround it by large plane for each of it's axis.
I suppose that because I can just determine which axis I'm tracking anyway, I won't need to check the plane.
You can then check the intersection of the plane to see where the mouse is now.
You would basically just check the delta each time the mouse moves, and feed it into that.

So I've figured out how to do ray collisions.
The system with the plane will work just fine, considering that the entities will be locked to it anyway.
I'll have a function in the map class that assigns the visual drag things to the entity, so that's not too complicated.
The move command update will probably be where I'm going to do the update things.
I'll probably just have one plane for the entire map, and change it's orientation when needed.
I'll then pass the update map function the point of the current intersection, and the new position can be created from that.

--More on rays--
With regards to how I should be checking the location of objects, I think I need to change my current strategy.
Firstly, the planes should be facing the camera, and should also be a set distance away from the camera.
Currently, they're placed on the centre of the world, which could be a problem, as if the camera moves then the calculation gets out of wack.
I don't think they need to be facing the camera though.
Then, I need to have three planes, one for each axis.
When I go to perform an action, the system needs to determine which plane is facing the camera the most, and use that one for the collision.

--Terrains--
I'm going to take a break from the object movement to do the terrain.
I've decided to keep the terrain as it is, a grid based system.
I've decided this because of a few reasons.
Firstly, I don't really need to be able to move the terrains around.
I only thought of that feature to make the editor fit for other projects.
The reality is I think a grid based system will work just fine.
That means that I need the ability to change the current terrain.
Here are some things that I will need by the time the project goes live:

Skyboxes
Object editor
The ability to export projects
A logo!

The object editor doesn't have to be too complicated at this stage, but I do need to build up the foundation.
I'll start work on the skybox functionality.

--Skybox--
One thing is that the user should be able to define multiple skyboxes.
During a game, the user would have a ton of skyboxes for different situations.
I'll probably just have a dialog in the map properties area that allows the user to add and delete sky boxes.
It should work by having the user define the textures, and then creating a material in the code.
This information can then be stored in the map file.

So I suppose the list to add skyboxes will look a lot like the resource locations dialog.
It will show a list of skyboxes, and maybe a thumbnail of them.
Then the user can double click and be shown a dialog of information about the skybox, like the images that make it up.
Later on I could add a render of the skybox in another window, but I'll do that later.

--Skybox Dialogs--
The dialog for the skybox is kind of important.
It needs to be able to tell if it's loading a skybox, or editing one.
So I think I need some sort of class that manages skyboxes.
So for example, a skybox could be it's own class, and then could be managed by the skybox manager.
This way, when the dialog to edit the map properties appears, the values could be loaded in from the skybox manager.
The skybox edit dialog could then take a pointer to the skybox that's being edited at the moment.
The manager can be in-charge of deleting and adding new skyboxes.
Then when the user wants to select a skybox from the main menu or whatever, it can be found from the skybox manager.


--Plan for the user interface--
By the time the final product comes out, there will be a few things about it that will have changed.
I think it would be a good idea to keep the toolbar items.
They can have a few things in them, like a button to start up the game, undo and redo buttons and maybe some others.
The terrain tools in there at the moment aren't doing any thing bad, so I'll leave them.

Points:
    I want to give the user the ability to place thing actually on the terrain based on a ray.
    This will include dragging things in from the window.

    Things can be selected from the hierarchy, or from within the map.
    I'm not sure if I need a tool to do this.

    Items can be moved around with their axis arrow things.
    This will also involve a click.

    I might need a feature, like being able to hold down control to get to the selection tool.


keys:
    Key when terrain editing to do the opposite
    Key to get to the selection tool.

Maybe, when an item is selected, pressing the m button will begin to drag the item along the terrain, if there is any terrain.

What I'm thinking at the moment is having a section in the information panel for the map.
This could contain attributes, light values and other things.
In here you could select the skybox currently in use, as well as some other things.

For that then, it would be a good idea to start preparing for the object inspector.

--Object Inspector--
This could be the most important panel in the entire programme.
It would be incharge of supplying information about the object that's currently selected.
There is quite a bit of information that the panel will have to show.
A lot of this content will also be repeated, for example, pretty much every object will have an object attributes section.
So for this reason I think it might be a good idea to abstract out the ui and have it be show and hidden according to when it's needed
There would be no point in re-creating it.

A lot of engines assign components to objects.
This sort of thing would be a physics body, for example.
I'm not sure if I'm going to need something like that.

The object attributes section might be important.
That's where you can assign attributes to objects.
I might eventually implement a feature where you can pop that section out, but for now I don't suppose I would need that.
I suppose I could call this section just attributes.
So depending on what type of object the object being inspected is, it can have different things done to it.

--Object Components--
Components is basically the name I'm going to give to the parts of the objects.
Objects posess different components based on what sort of object they are.
A component will be a panel that's inherited from.
The purpose of the object inspector will just be showing the components that need to be shown based on what sort of item is selected.
Components can then be filled with stuff relevant to the object.

So I'll need a component class which can then be inherited from.
The object inspector will have to have one of each type of component, they can just be shown and hidden depending on the object.

From here, the best thing to do would be to construct the component class and try to get it to appear in the inspector.
